from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime, timezone, timedelta
from servercatcher.core.models import db_helper
from servercatcher.core.models.server import ServerHistory
from sqlalchemy import select
from servercatcher.app.server.crud import get_active_servers, get_all_servers
from servercatcher.app.notification.handler import fetch_servers_from_link

MSK = timezone(timedelta(hours=3))
router = Router()

@router.message(Command("main"))
async def cmd_main(message: Message):
    servers_data = await fetch_servers_from_link()
    now_dt = datetime.now(MSK)
    now = now_dt.strftime("%d.%m.%Y %H:%M:%S")

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö ip –Ω–µ –ø—É—Å—Ç–æ–π –∏ –¥–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞
    filtered_servers = []
    for srv in servers_data:
        ip = srv.get('ip')
        if not ip:
            continue
        start_str = srv.get('start') or None
        if start_str:
            try:
                start_dt = datetime.strptime(start_str, "%d/%m/%Y").replace(tzinfo=MSK)
            except Exception:
                start_dt = now_dt
        else:
            start_dt = now_dt
        if start_dt <= now_dt:
            filtered_servers.append(srv)

    if not filtered_servers:
        await message.answer(f"–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.\n–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {now}")
        return

    ip_list = "\n".join(f"<b>{idx+1}</b>. {srv.get('ip')}" for idx, srv in enumerate(filtered_servers))
    text = f"""
üìå–†–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π:
{ip_list}

‚è∞–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: <b>{now} –ú–°–ö</b>"""

    await message.answer(text, parse_mode="HTML")


@router.message(Command("history"))
async def cmd_history(message: Message):
    args = message.text.split()
    if len(args) == 1:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    ip_filter = args[1]
    async with db_helper.session_factory() as session:
        query = select(ServerHistory).where(ServerHistory.server_ip == ip_filter)
        result = await session.execute(query)
        histories = result.scalars().all()

    if not histories:
        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {ip_filter} –ø—É—Å—Ç–∞.")
        return

    # –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ –ø–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ-—É–¥–∞–ª–µ–Ω–∏–µ
    both_records = [h for h in histories if h.start is not None and h.end is not None]
    start_only = [h for h in histories if h.start is not None and h.end is None]
    end_only = [h for h in histories if h.start is None and h.end is not None]

    both_records.sort(key=lambda h: (h.start, h.end))
    start_only.sort(key=lambda h: h.start)
    end_only.sort(key=lambda h: h.end)

    lines = [f"üìú–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è IP {ip_filter}:"]

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
    for rec in both_records:
        start_dt = rec.start.astimezone(MSK)
        end_dt = rec.end.astimezone(MSK)
        days_active = abs((end_dt - start_dt).days)
        lines.append(f"‚ûï–î–æ–±–∞–≤–ª–µ–Ω: {start_dt.strftime('%d.%m.%Y')}")
        lines.append(f"‚ûñ –£–¥–∞–ª–µ–Ω: {end_dt.strftime('%d.%m.%Y')} (—Ä–∞–∑–º–µ—â–µ–Ω {days_active} –¥–Ω–µ–π)")

    # –ó–∞—Ç–µ–º –ø–æ–ø–∞—Ä–Ω–æ —Å–≤—è–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ start/end –∑–∞–ø–∏—Å–∏ –∏ —á–µ—Ä–µ–¥—É–µ–º
    pair_count = min(len(start_only), len(end_only))
    for i in range(pair_count):
        s = start_only[i]
        e = end_only[i]
        start_dt = s.start.astimezone(MSK)
        end_dt = e.end.astimezone(MSK)
        days_active = abs((end_dt - start_dt).days)
        lines.append(f"‚ûï–î–æ–±–∞–≤–ª–µ–Ω: {start_dt.strftime('%d.%m.%Y')}")
        lines.append(f"‚ûñ –£–¥–∞–ª–µ–Ω: {end_dt.strftime('%d.%m.%Y')} (—Ä–∞–∑–º–µ—â–µ–Ω {days_active} –¥–Ω–µ–π)")

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî –≤—ã–≤–æ–¥–∏–º –∏—Ö
    for s in start_only[pair_count:]:
        start_dt = s.start.astimezone(MSK)
        lines.append(f"‚ûï–î–æ–±–∞–≤–ª–µ–Ω: {start_dt.strftime('%d.%m.%Y')}")

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ –ø–∞—Ä—ã ‚Äî –≤—ã–≤–æ–¥–∏–º –∏—Ö –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for e in end_only[pair_count:]:
        end_dt = e.end.astimezone(MSK)
        lines.append(f"‚ûñ –£–¥–∞–ª–µ–Ω: {end_dt.strftime('%d.%m.%Y')}")

    text = "\n".join(lines)
    chunk_size = 4000
    for i in range(0, len(text), chunk_size):
        await message.answer(text[i:i+chunk_size])