from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime, timezone, timedelta
from servercatcher.core.models import db_helper
from servercatcher.core.models.server import ServerHistory
from sqlalchemy import select
from servercatcher.app.server.crud import get_active_servers, get_all_servers
from servercatcher.app.notification.handler import fetch_servers_from_link

MSK = timezone(timedelta(hours=3))
router = Router()

@router.message(Command("main"))
async def cmd_main(message: Message):
    servers_data = await fetch_servers_from_link()
    now = datetime.now(MSK).strftime("%d.%m.%Y %H:%M:%S")

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö ip –Ω–µ –ø—É—Å—Ç–æ–π
    servers_data = [srv for srv in servers_data if srv.get('ip')]

    if not servers_data:
        await message.answer(f"–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.\n–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {now}")
        return

    ip_list = "\n".join(f"<b>{idx+1}</b>. {srv.get('ip')}" for idx, srv in enumerate(servers_data))
    text = f"""
üìå–†–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π:
{ip_list}

‚è∞–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: <b>{now} –ú–°–ö</b>"""

    await message.answer(text, parse_mode="HTML")


@router.message(Command("history"))
async def cmd_history(message: Message):
    args = message.text.split()
    if len(args) == 1:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    ip_filter = args[1]
    async with db_helper.session_factory() as session:
        query = select(ServerHistory).order_by(ServerHistory.server_ip, ServerHistory.start)
        query = query.where(ServerHistory.server_ip == ip_filter)
        result = await session.execute(query)
        histories = result.scalars().all()

    if not histories:
        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {ip_filter} –ø—É—Å—Ç–∞.")
        return

    lines = []
    current_ip = None
    for hist in histories:
        if hist.server_ip != current_ip:
            lines.append(f"\nüìú–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è IP {hist.server_ip}:")
            current_ip = hist.server_ip
        if hist.start is None and hist.end is not None:
            end = hist.end.astimezone(MSK).strftime("%d.%m.%Y")
            # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å start –¥–ª—è —Ç–æ–≥–æ –∂–µ IP, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏
            start_record = next((h for h in histories if h.server_ip == hist.server_ip and h.start is not None), None)
            if start_record:
                days_active = abs((hist.end - start_record.start).days)
                lines.append(f"‚ûñ –£–¥–∞–ª–µ–Ω: {end} (—Ä–∞–∑–º–µ—â–µ–Ω {days_active} –¥–Ω–µ–π)")
            else:
                lines.append(f"‚ûñ –£–¥–∞–ª–µ–Ω: {end} - {hist.server_ip}")
        elif hist.start and hist.end:
            start = hist.start.astimezone(MSK).strftime("%d.%m.%Y")
            end = hist.end.astimezone(MSK).strftime("%d.%m.%Y")
            days_active = abs((hist.end - hist.start).days)
            lines.append(f"‚ûï–î–æ–±–∞–≤–ª–µ–Ω: {start}")
            # –ò—â–µ–º –∑–∞–ø–∏—Å—å –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            removal_record = next((h for h in histories if h.server_ip == hist.server_ip and h.start is None and h.end), None)
            if removal_record:
                removal_end = removal_record.end.astimezone(MSK).strftime("%d.%m.%Y")
                lines.append(f"‚ûñ–£–¥–∞–ª–µ–Ω: {removal_end} (—Ä–∞–∑–º–µ—â–µ–Ω {days_active} –¥–Ω–µ–π) - {removal_record.server_ip}")
            else:
                lines.append(f"‚ûñ–£–¥–∞–ª–µ–Ω: {end} (—Ä–∞–∑–º–µ—â–µ–Ω {days_active} –¥–Ω–µ–π) ")
        elif hist.start:
            start = hist.start.astimezone(MSK).strftime("%d.%m.%Y")
            lines.append(f"‚ûï–î–æ–±–∞–≤–ª–µ–Ω: {start}")

    text = "\n".join(lines)
    chunk_size = 4000
    for i in range(0, len(text), chunk_size):
        await message.answer(text[i:i+chunk_size])