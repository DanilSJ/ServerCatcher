import json

import aiohttp
import asyncio
from datetime import datetime, timezone, timedelta

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from servercatcher.core.models import db_helper
from servercatcher.core.models.server import Server
from servercatcher.core.models.user import User
from servercatcher.core.config import bot

MSK = timezone(timedelta(hours=3))
CHECK_INTERVAL = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
PASTEBIN_URL = "https://pastebin.com/raw/DnHHkrxx"


async def fetch_servers_from_link() -> list[dict]:
    async with aiohttp.ClientSession() as session:
        async with session.get(PASTEBIN_URL) as resp:
            text = await resp.text()
            data = json.loads(text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ JSON
            return data.get("servers", [])


async def add_new_servers_to_db(session: AsyncSession, servers_data: list[dict]) -> list[Server]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ –±–∞–∑—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    new_servers = []

    for srv in servers_data:
        ip = srv.get("ip")
        if not ip:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –±–µ–∑ IP
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ IP, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
        result = await session.execute(select(Server).where(Server.ip_adress == ip))
        exists = result.scalars().first()
        if exists:
            continue

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        start_str = srv.get("start", "")
        end_str = srv.get("end", "")

        start = datetime.strptime(start_str, "%d/%m/%Y").replace(tzinfo=MSK) if start_str else None
        end = datetime.strptime(end_str, "%d/%m/%Y").replace(tzinfo=MSK) if end_str else None

        new_server = Server(
            ip_adress=ip,
            text=srv.get("name", "–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"),
            start=start,
            end=end,
        )
        session.add(new_server)
        new_servers.append(new_server)

    if new_servers:
        await session.commit()
    return new_servers

async def notify_users_about_new_servers(session: AsyncSession, servers: list[Server]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö"""
    if not servers:
        return

    result = await session.execute(select(User.telegram_id))
    users = result.scalars().all()

    for server in servers:
        message = f"""‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä!</b>

üñ• IP-–∞–¥—Ä–µ—Å: <code>{server.ip_adress}</code>
üìù –¢–µ–∫—Å—Ç: <code>{server.text}</code>

‚è∞ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è <b>{server.start.strftime('%d.%m.%Y')} –ú–°–ö</b>"""
        for user_id in users:
            try:
                await bot.send_message(user_id, message, parse_mode="HTML")
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
                continue

async def check_closed_servers(session: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ end, –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    now = datetime.now(MSK)

    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
    result = await session.execute(
        select(Server).where(Server.end.is_not(None), Server.end < now)
    )
    closed_servers = result.scalars().all()

    if not closed_servers:
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await session.execute(select(User.telegram_id))
    users = result.scalars().all()

    for server in closed_servers:
        # –°—á–∏—Ç–∞–µ–º —Å—Ä–æ–∫ —Ä–µ–∫–ª–∞–º—ã (–µ—Å–ª–∏ –æ–±–µ –¥–∞—Ç—ã –∑–∞–¥–∞–Ω—ã)
        days = abs((server.end - server.start).days) if server.start and server.end else "?"
        message = f"""‚ùå <b>–£–î–ê–õ–ï–ù –°–ï–†–í–ï–†!</b>

üñ• IP-–∞–¥—Ä–µ—Å: <code>{server.ip_adress}</code>
‚è≥ –°—Ä–æ–∫ —Ä–µ–∫–ª–∞–º—ã: <b>{days} –¥–µ–Ω—å</b>

üóë –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: <b>{server.end.strftime('%d.%m.%Y')} –ú–°–ö</b>"""

        for user_id in users:
            try:
                await bot.send_message(user_id, message, parse_mode="HTML")
            except Exception:
                continue

        # –ú–æ–∂–Ω–æ –ª–∏–±–æ —É–¥–∞–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä, –ª–∏–±–æ –ø–æ–º–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–æ–º
        # –£–¥–∞–ª–µ–Ω–∏–µ:
        await session.delete(server)

    await session.commit()


async def check_and_update_servers():
    while True:
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        async with db_helper.session_factory() as session:
            servers_data = await fetch_servers_from_link()
            new_servers = await add_new_servers_to_db(session, servers_data)
            await notify_users_about_new_servers(session, new_servers)
            await check_closed_servers(session)  # <-- –Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await asyncio.sleep(CHECK_INTERVAL)
