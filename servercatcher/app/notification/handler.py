import json

import aiohttp
import asyncio
from datetime import datetime, timezone, timedelta
import time

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from servercatcher.core.models import db_helper
from servercatcher.core.models.server import Server, ServerHistory
from servercatcher.core.models.user import User, Chat
from servercatcher.core.config import bot

MSK = timezone(timedelta(hours=3))
CHECK_INTERVAL = 3
PASTEBIN_URL = "http://127.0.0.1:8000"


async def fetch_servers_from_link() -> list[dict]:
    url = f"{PASTEBIN_URL}?nocache={int(time.time())}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers={'Cache-Control': 'no-cache'}) as resp:
                text = await resp.text()
                data = json.loads(text)
                return data.get("servers", [])
    except Exception as e:

        return []


async def add_new_servers_to_db(session: AsyncSession, servers_data: list[dict]) -> list[Server]:
    new_servers = []

    for srv in servers_data:
        ip = srv.get("ip")
        if not ip:
            continue

        result = await session.execute(select(Server).where(Server.ip_adress == ip))
        server = result.scalars().first()
        start_str = srv.get("start", "")
        start = datetime.strptime(start_str, "%d/%m/%Y").replace(tzinfo=MSK) if start_str else datetime.now(MSK)

        if server:
            if not server.is_active:

                server.is_active = True
                server.end = None
                # –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                history = ServerHistory(server_ip=ip, start=start, end=None)
                session.add(history)
            else:
                pass
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
            hist_result = await session.execute(
                select(ServerHistory).where(ServerHistory.server_ip == ip, ServerHistory.end == None)
            )
            open_history = hist_result.scalars().first()
            if not open_history:
                # –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                history = ServerHistory(server_ip=ip, start=start, end=None)
                session.add(history)
            continue
        # –ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä

        new_server = Server(
            ip_adress=ip,
            text=srv.get("name", "–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"),
            is_active=True,
        )
        session.add(new_server)
        history = ServerHistory(server_ip=ip, start=start, end=None)
        session.add(history)
        new_servers.append(new_server)

    if new_servers:
        await session.commit()
    else:
        await session.commit()  # commit –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    return new_servers

async def get_all_chats(session: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    chats = set()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    result = await session.execute(select(User.telegram_id))
    users = result.scalars().all()
    chats.update(users)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã
    result = await session.execute(select(Chat.chat_id))
    groups = result.scalars().all()
    chats.update(groups)
    
    return list(chats)

async def notify_users_about_new_servers(session: AsyncSession, servers: list[Server]):
    if not servers:
        return

    chats = await get_all_chats(session)

    for server in servers:
        message = f"""‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä!</b>

üñ• IP-–∞–¥—Ä–µ—Å: <code>{server.ip_adress}</code>
üìù –¢–µ–∫—Å—Ç: <code>{server.text}</code>

‚è∞ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è <b>{server.start.strftime('%d.%m.%Y')} –ú–°–ö</b>"""
        for chat_id in chats:
            try:
                await bot.send_message(chat_id, message, parse_mode="HTML")
            except Exception as e:
                pass

async def notify_users_about_new_ips(session: AsyncSession, new_ips: list[str], servers_data: list[dict]):
    if not new_ips:
        return
    
    chats = await get_all_chats(session)
    
    for ip in new_ips:
        srv = next((s for s in servers_data if s.get("ip") == ip), None)
        if not srv:
            continue
        name = srv.get("name", "–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä")
        now = datetime.now(MSK)
        message = f"""‚úÖ <b>–î–û–ë–ê–í–õ–ï–ù –°–ï–†–í–ï–†!</b>\n\nüñ• IP-–∞–¥—Ä–µ—Å: <code>{ip}</code>\nüìù –¢–µ–∫—Å—Ç: <code>{name}</code>\n\n‚è∞ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è <b>{now.strftime('%d.%m.%Y')} –ú–°–ö</b>"""
        for chat_id in chats:
            try:
                await bot.send_message(chat_id, message, parse_mode="HTML")
            except Exception as e:
                pass
async def check_closed_servers(session: AsyncSession, current_server_ips: list[str]):
    now = datetime.now(MSK)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
    result = await session.execute(
        select(Server).where(Server.is_active == True)
    )
    active_servers = result.scalars().all()

    if not active_servers:
        return

    chats = await get_all_chats(session)

    for server in active_servers:
        if server.ip_adress not in current_server_ips:
            # days —Å—á–∏—Ç–∞–µ–º –ø–æ start –∏ now, –ø—Ä–∏–≤–æ–¥–∏–º start –∫ MSK –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            start = server.start
            if start and start.tzinfo is None:
                start = start.replace(tzinfo=MSK)
            days = abs((now - start).days) if start else "?"
            message = f"""‚ùå <b>–£–î–ê–õ–ï–ù –°–ï–†–í–ï–†!</b>\n\nüñ• IP-–∞–¥—Ä–µ—Å: <code>{server.ip_adress}</code>\n‚è≥ –°—Ä–æ–∫ —Ä–µ–∫–ª–∞–º—ã: <b>{days} –¥–µ–Ω—å</b>\n\nüóë –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: <b>{now.strftime('%d.%m.%Y')} –ú–°–ö</b>"""

            for chat_id in chats:
                try:
                    await bot.send_message(chat_id, message, parse_mode="HTML")

                except Exception as e:
                    pass
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = ServerHistory(server_ip=server.ip_adress, start=None, end=now)
            session.add(history)
            server.is_active = False
            server.end = now
    await session.commit()
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    result = await session.execute(
        select(Server).where(Server.is_active == True)
    )
    active_servers = result.scalars().all()


async def check_and_update_servers():
    previous_server_ips = set()
    while True:
        async with db_helper.session_factory() as session:
            servers_data = await fetch_servers_from_link()

            current_server_ips = set(srv.get("ip") for srv in servers_data if srv.get("ip"))
            # –ù–æ–≤—ã–µ IP, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ–ø—Ä–æ—Å–µ
            new_ips = list(current_server_ips - previous_server_ips)
            await notify_users_about_new_ips(session, new_ips, servers_data)
            new_servers = await add_new_servers_to_db(session, servers_data)
            await notify_users_about_new_servers(session, new_servers)
            await check_closed_servers(session, list(current_server_ips))
            previous_server_ips = current_server_ips
        await asyncio.sleep(CHECK_INTERVAL)